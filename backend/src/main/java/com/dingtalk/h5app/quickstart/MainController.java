package com.dingtalk.h5app.quickstart;

import com.dingtalk.h5app.quickstart.dto.company.CompanyDto;
import com.dingtalk.h5app.quickstart.model.Company;
import com.dingtalk.h5app.quickstart.model.staicdata.Industry;
import com.dingtalk.h5app.quickstart.repository.CompanyRepository;
import com.dingtalk.h5app.quickstart.repository.staticdata.CityRepository;
import com.dingtalk.h5app.quickstart.repository.staticdata.IndustryRepository;
import com.dingtalk.h5app.quickstart.repository.staticdata.ProvinceRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.criteria.*;
import java.util.ArrayList;
import java.util.List;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private CompanyRepository companyRepository;

    @Autowired
    private IndustryRepository industryRepository;

    @Autowired
    private CityRepository cityRepository;

    @Autowired
    private ProvinceRepository provinceRepository;

    @PersistenceContext
    private EntityManager em;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path="/company")
    public @ResponseBody Iterable<CompanyDto> listCompany() {
        // This returns a JSON or XML with the users

//        Industry industry = new Industry();
//        industry.setName("行业1");
//        industry.setCategory("类别1");
//
//        Company company = new Company();
//        company.setName("company");
//        company.setIndustry(industry);
//
//        companyRepository.save(company);
        List<CompanyDto> companyDtos = new ArrayList<>();
        companyRepository.findAll().forEach(company -> companyDtos.add(new CompanyDto(company)));
        return  companyDtos;
    }

    @GetMapping(path="/industry")
    public @ResponseBody Iterable<Industry> listIndustry() {
        List<Industry> industries = (List<Industry>)industryRepository.findAll();

        for (Industry industry : industries) {
            System.out.println(industry);
        }
        return industries;
    }

    @GetMapping(path="/test")
    public @ResponseBody Iterable<CompanyDto> test() {
//        Province province = new Province();
//        province.setName("辽宁");
//        Province p = provinceRepository.save(province);
//        City c1 = new City();
//        c1.setName("铁岭");
//        c1.setProvince(p);
//        City c2 = new City();
//        c2.setName("沈阳");
//        c2.setProvince(p);
//        cityRepository.save(c1);
//        cityRepository.save(c2);

//        CriteriaBuilder builder = em.getCriteriaBuilder();
//        CriteriaQuery<Company> query = builder.createQuery(Company.class);
//        Root<Company> root = query.from(Company.class);
//
//        Predicate isOne = builder.equal(root.get("name"), "公司1");

        Specification<Company> spec = new Specification<Company>() {
            @Override
            public Predicate toPredicate(Root<Company> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
                //1.获取比较的属性
                Path<Object> custId = root.get("name");//查询的式属性名，不是表的字段名
                //2.构造查询条件  ：    select * from cst_customer where cust_id = 3
                /**
                 * 第一个参数：需要比较的属性（path对象）
                 * 第二个参数：当前需要比较的取值
                 */
                Predicate predicate = cb.like(custId.as(String.class), "%公司%");
                Predicate predicate1 = cb.like(root.get("id").as(String.class), "%1%");

                List<Predicate> predicateList = new ArrayList<>();
                predicateList.add(predicate);
                predicateList.add(predicate1);
                return cb.and(predicateList.toArray(new Predicate[predicateList.size()]));
//                return cb.disjunction();
//                return ;
            }
        };

        Sort sort = new Sort(Sort.Direction.DESC,"id");
        Iterable<Company> customer = companyRepository.findAll(spec, sort);
        List<CompanyDto> cd = new ArrayList<CompanyDto>();
        for (Company co : customer) {
            cd.add(new CompanyDto(co));
        }
        return cd;

//        Industry industry = new Industry();
//        industry.setName("金融");
//        industry.setCategory("c1");
//
//        industryRepository.save(industry);
//
//        Company c = new Company();
//        c.setName("公司1");
//        c.setIndustry(industry);
//        c.setType(CompanyType.technology);
//
//        City city = cityRepository.findByName("沈阳");
//        c.setCity(city);
//
//        companyRepository.save(c);

    }
}